#!/usr/bin/env bash
set -e

<%
  def discover_external_ip
    networks = spec.networks.marshal_dump

    _, network = networks.find do |_name, network_spec|
      network_spec.default
    end

    if !network
      _, network = networks.first
    end

    if !network
      raise "Could not determine IP via network spec: #{networks}"
    end

    network.ip
  end
%>

function log_failure {
  echo "$(date --rfc-3339=seconds) :: Healthcheck failed consistently, restarting CC"
}

HOST=<%= p('cc.nginx.ip').empty? ? discover_external_ip : p('cc.nginx.ip') %>
<% if p('temporary_disable_non_tls_endpoints')  %>
PORT=<%= p("cc.public_tls.port") %>
PROTOCOL="https"
<% else  %>
PORT=<%= p("cc.external_port") %>
PROTOCOL="http"
<% end  %>
URL="${PROTOCOL}://${HOST}:${PORT}/v2/info"

source /var/vcap/packages/capi_utils/monit_utils.sh

echo 'Waiting for Cloud Controller to initially become healthy'

wait_for_server_to_become_healthy "${URL}" "<%= p("cc.api_post_start_healthcheck_timeout_in_seconds") %>"

echo 'Initial check passed, will now restart CC over on repeated failures'

trap log_failure EXIT

# if we fail to curl it 5 times in a row across 50 seconds, die so monit will restart us
set -e
while true; do
  curl \
    -sS \
    --max-time <%= p('cc.api_health_check_timeout_per_retry') %> \
    --retry 5 \
    --retry-delay 10 \
    -A "ccng_monit_http_healthcheck" \
    -k \
    "${URL}" > /dev/null
  sleep 10
done