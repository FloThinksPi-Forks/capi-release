
<% if p("bpm.enabled") %>

check process cloud_controller_ng
  with pidfile /var/vcap/sys/run/bpm/cloud_controller_ng/cloud_controller_ng.pid
  start program "/var/vcap/jobs/bpm/bin/bpm start cloud_controller_ng"
  stop program "/var/vcap/jobs/bpm/bin/bpm stop cloud_controller_ng"
  depends on ccng_monit_http_healthcheck
  group vcap
  if totalmem > <%= p("cc.thresholds.api.alert_if_above_mb") %> Mb for 3 cycles then alert
  if totalmem > <%= p("cc.thresholds.api.restart_if_consistently_above_mb") %> Mb for 15 cycles then exec "/var/vcap/jobs/cloud_controller_ng/bin/restart_drain"
  if totalmem > <%= p("cc.thresholds.api.restart_if_above_mb") %> Mb for 3 cycles then exec "/var/vcap/jobs/cloud_controller_ng/bin/restart_drain"


check process ccng_monit_http_healthcheck
    with pidfile /var/vcap/sys/run/bpm/cloud_controller_ng/ccng_monit_http_healthcheck.pid
    start program "/var/vcap/jobs/bpm/bin/bpm start ccng_monit_http_healthcheck"
    stop program "/var/vcap/jobs/bpm/bin/bpm stop ccng_monit_http_healthcheck"
    group vcap

<% (1..(p("cc.jobs.local.number_of_workers"))).each do |index| %>
check process cloud_controller_worker_local_<%= index %>
  with pidfile /var/vcap/sys/run/bpm/cloud_controller_ng/local_worker_<%= index %>.pid
  start program "/var/vcap/jobs/bpm/bin/bpm start cloud_controller_ng -p local_worker_<%= index %>"
  stop program "/var/vcap/jobs/bpm/bin/bpm stop cloud_controller_ng -p local_worker_<%= index %>"
  group vcap
  if totalmem > <%= p("cc.thresholds.api.alert_if_above_mb") %> Mb for 3 cycles then alert
  if totalmem > <%= p("cc.thresholds.api.restart_if_consistently_above_mb") %> Mb for 15 cycles then restart
  if totalmem > <%= p("cc.thresholds.api.restart_if_above_mb") %> Mb for 3 cycles then restart
<% end %>

check process nginx_cc
  with pidfile /var/vcap/sys/run/bpm/cloud_controller_ng/nginx.pid
  start program "/var/vcap/jobs/bpm/bin/bpm start cloud_controller_ng -p nginx"
  stop program "/var/vcap/jobs/bpm/bin/bpm stop cloud_controller_ng -p nginx"
  depends on cloud_controller_ng
  group vcap

<% if_p("cc.newrelic.license_key") do %>
check process nginx_newrelic_plugin
  with pidfile /var/vcap/sys/run/bpm/cloud_controller_ng/nginx_newrelic_plugin.pid
  start program "/var/vcap/jobs/bpm/bin/bpm start cloud_controller_ng -p nginx_newrelic_plugin"
  stop program "/var/vcap/jobs/bpm/bin/bpm stop cloud_controller_ng -p nginx_newrelic_plugin"
  group vcap
<% end %>

<% else %>

check process cloud_controller_ng
  with pidfile /var/vcap/sys/run/cloud_controller_ng/cloud_controller_ng.pid
  start program "/var/vcap/jobs/cloud_controller_ng/bin/cloud_controller_ng_ctl start"
        as uid vcap and gid vcap
  stop program "/var/vcap/jobs/cloud_controller_ng/bin/cloud_controller_ng_ctl stop"
        as uid vcap and gid vcap
  group vcap
  if totalmem > <%= p("cc.thresholds.api.alert_if_above_mb") %> Mb for 3 cycles then alert
  if totalmem > <%= p("cc.thresholds.api.restart_if_consistently_above_mb") %> Mb for 15 cycles then exec "/var/vcap/jobs/cloud_controller_ng/bin/restart_drain"
  if totalmem > <%= p("cc.thresholds.api.restart_if_above_mb") %> Mb for 3 cycles then exec "/var/vcap/jobs/cloud_controller_ng/bin/restart_drain"

<% (1..(p("cc.jobs.local.number_of_workers"))).each do |index| %>
check process cloud_controller_worker_local_<%= index %>
  with pidfile /var/vcap/sys/run/cloud_controller_ng/cloud_controller_worker_<%= index %>.pid
  start program "/var/vcap/jobs/cloud_controller_ng/bin/cloud_controller_worker_ctl start <%= index %>"
        as uid vcap and gid vcap
  stop program "/var/vcap/jobs/cloud_controller_ng/bin/cloud_controller_worker_ctl stop <%= index %>"
        as uid vcap and gid vcap
  group vcap
  if totalmem > <%= p("cc.thresholds.api.alert_if_above_mb") %> Mb for 3 cycles then alert
  if totalmem > <%= p("cc.thresholds.api.restart_if_consistently_above_mb") %> Mb for 15 cycles then restart
  if totalmem > <%= p("cc.thresholds.api.restart_if_above_mb") %> Mb for 3 cycles then restart
<% end %>

check process nginx_cc
  with pidfile /var/vcap/sys/run/nginx_cc/nginx.pid
  start program "/var/vcap/jobs/cloud_controller_ng/bin/nginx_ctl start"
        as uid vcap and gid vcap
  stop program "/var/vcap/jobs/cloud_controller_ng/bin/nginx_ctl stop"
        as uid vcap and gid vcap
  depends on cloud_controller_ng
  group vcap

<% if_p("cc.newrelic.license_key") do %>
check process nginx_newrelic_plugin
  with pidfile /var/vcap/sys/run/nginx_newrelic_plugin/nginx_newrelic_plugin.pid
  start program "/var/vcap/jobs/cloud_controller_ng/bin/nginx_newrelic_plugin_ctl start"
      as uid vcap and gid vcap
  stop program "/var/vcap/jobs/cloud_controller_ng/bin/nginx_newrelic_plugin_ctl stop"
      as uid vcap and gid vcap
  group vcap
<% end %>
<% end %>

